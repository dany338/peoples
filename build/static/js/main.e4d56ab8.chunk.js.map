{"version":3,"sources":["logo.svg","components/styled.js","components/AddPeople.js","components/People.js","components/PeopleList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PeopleMain","styled","div","_templateObject","PeopleContainer","_templateObject2","PeopleContent","Card","_templateObject3","PeopleHeader","h1","_templateObject4","PeopleItem","_templateObject5","PeopleItemText","_templateObject6","PeopleItemDelete","Button","_templateObject7","PeopleAdd","_templateObject8","Input","input","_templateObject9","Content","Text","_templateObject10","ImgLogo","Image","_templateObject11","AddPeople","_ref","value","change","press","createPeople","react_default","a","createElement","type","onChange","onKeyPress","onClick","People","name","deletePeople","PeopleList","_useState","useState","_useState2","Object","slicedToArray","people","setPeople","_useState3","_useState4","peoples","setPeoples","createNewPeopleItem","concat","toConsumableArray","src","logo","title","width","index_es","id","defaultMessage","bg","borderRadius","boxShadow","map","item","key","components_People","indexToDelete","filter","index","components_AddPeople","e","target","defaultProps","App","react_router","exact","path","component","Component","Boolean","window","location","hostname","match","addLocaleData","en","es","language","navigator","languages","userLanguage","messages","localeData","toLowerCase","split","ReactDOM","render","locale","react_router_dom","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4d56ab8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Text, Button, Card, Image } from 'rebass';\r\nimport styled from 'styled-components';\r\n\r\nexport const PeopleMain = styled.div`\r\n  text-align: center;\r\n  border: 1px solid white;\r\n  width: 80vw;\r\n  height: auto;\r\n  box-shadow: 2px 3px 15px rgba(0, 0, 0, 0.5);\r\n  background: #f6f6f6;\r\n  padding-bottom: 60px;\r\n  margin: 40px auto;\r\n`;\r\n\r\nexport const PeopleContainer = styled.div`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n`;\r\n\r\nexport const PeopleContent = styled(Card)`\r\n  width: 75%;\r\n  margin: 0 auto;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const PeopleHeader = styled.h1`\r\n  color: black;\r\n  font-family: -apple-system, BlinkMacSystemFont, Ebrima, Fira Sans, sans-serif;\r\n  font-weight: 400;\r\n  text-transform: uppercase;\r\n  margin: 70px auto 30px;\r\n`;\r\n\r\nexport const PeopleItem = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const PeopleItemText = styled.p`\r\n  width: 90%;\r\n  background-color: white;\r\n  border: 1px solid lightgrey;\r\n  box-shadow: 1px 1px 1px lightgrey;\r\n  padding: 12px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nexport const PeopleItemDelete = styled(Button)`\r\n  width: 35px;\r\n  height: 35px;\r\n  cursor: pointer;\r\n  background: #ff7373;\r\n  border-radius: 10px;\r\n  box-shadow: 1px 1px 1px #c70202;\r\n  color: white;\r\n  font-size: 18px;\r\n  margin-right: 5px;\r\n  &:hover {\r\n    box-shadow: none;\r\n    margin-top: 1px;\r\n    margin-left: 1px;\r\n  }\r\n`;\r\n\r\nexport const PeopleAdd = styled(Button)`\r\n  color: white;\r\n  font-size: 2em;\r\n  width: 40px;\r\n  height: 40px;\r\n  padding: 0px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  cursor: pointer;\r\n  background: #73ff73;\r\n  border-radius: 10px;\r\n  box-shadow: 1px 1px 1px #47a947;\r\n  margin: 20px auto 0;\r\n`;\r\n\r\nexport const Input = styled.input`\r\n  opacity: 1;\r\n  cursor: pointer;\r\n  height: 24px;\r\n  margin: auto;\r\n  width: 50%;\r\n`;\r\n\r\nexport const Content = styled(Text)`\r\n  color: #000000;\r\n  font-size: 12px;\r\n  line-height: 20px;\r\n  font-family: Ebrima;\r\n  & a {\r\n    color: #000000;\r\n  }\r\n`;\r\n\r\nexport const ImgLogo = styled(Image)`\r\n  width: 50px;\r\n  position: relative;\r\n  top: 50px;\r\n  display: inline-block;\r\n  max-width: 20%;\r\n  max-height: 40px;\r\n`;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { PeopleAdd, Input } from './styled';\r\n\r\nconst AddPeople = ({ value, change, press, createPeople }) => (\r\n  <div>\r\n    <Input\r\n      type=\"text\"\r\n      value={value}\r\n      onChange={change}\r\n      onKeyPress={press}\r\n    />\r\n    <PeopleAdd\r\n      onClick={createPeople}\r\n    >\r\n      +\r\n    </PeopleAdd>\r\n  </div>\r\n);\r\n\r\nAddPeople.propTypes = {\r\n  change: PropTypes.func.isRequired,\r\n  press: PropTypes.func.isRequired,\r\n  createPeople: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddPeople\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  PeopleItem,\r\n  PeopleItemText,\r\n  PeopleItemDelete,\r\n} from './styled';\r\n\r\nconst People = ({ name, deletePeople }) => (\r\n  <PeopleItem>\r\n    <PeopleItemText>\r\n      {name}\r\n    </PeopleItemText>\r\n    <PeopleItemDelete\r\n      onClick={deletePeople}\r\n    >\r\n      -\r\n    </PeopleItemDelete>\r\n  </PeopleItem>\r\n);\r\n\r\nPeople.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  deletePeople: PropTypes.func.isRequired\r\n}\r\n\r\nexport default People\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { FormattedMessage } from 'react-intl';\r\nimport AddPeople from './AddPeople';\r\nimport People from './People';\r\nimport logo from '../logo.svg';\r\n\r\nimport {\r\n  PeopleMain,\r\n  PeopleContainer,\r\n  PeopleContent,\r\n  PeopleHeader,\r\n  Content,\r\n  ImgLogo,\r\n} from './styled';\r\n\r\nconst PeopleList = () => {\r\n  const [people, setPeople] = useState('');\r\n  const [peoples, setPeoples] = useState([{name: 'chris bolton'}]);\r\n\r\n  const createNewPeopleItem = () => {\r\n    setPeople('');\r\n    setPeoples([\r\n      ...peoples,\r\n      {\r\n        name: people\r\n      }\r\n    ]);\r\n  };\r\n\r\n  const handleKeyPress = e => {\r\n    if (e.target.value !== '') {\r\n      if (e.key === 'Enter') {\r\n        createNewPeopleItem();\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInput = e => {\r\n    setPeople(e.target.value);\r\n  };\r\n\r\n  // this is now being emitted back to the parent from the child component\r\n  const deletePeople = indexToDelete => {\r\n    setPeoples(peoples.filter((people, index) => index !== indexToDelete));\r\n  };\r\n\r\n  return (\r\n    <PeopleMain>\r\n      <ImgLogo src={logo} title=\"React Logo - App Peoples\"/>\r\n      <PeopleHeader>\r\n        <Content width={1}>\r\n          <FormattedMessage\r\n            id=\"Home.welcome\"\r\n            defaultMessage=\"Welcome Peoples\"\r\n          />\r\n        </Content>\r\n      </PeopleHeader>\r\n      <PeopleContainer>\r\n        <PeopleContent\r\n          width={1}\r\n          p={5}\r\n          bg='#f6f6ff'\r\n          borderRadius={8}\r\n          boxShadow='0 2px 16px rgba(0, 0, 0, 0.25)'\r\n        >\r\n          {peoples.map((item, key) => (\r\n            <People\r\n              key={key}\r\n              name={item.name}\r\n              deletePeople={() => deletePeople(key)}\r\n            />\r\n          ))}\r\n        </PeopleContent>\r\n        <AddPeople\r\n          value={people}\r\n          change={handleInput}\r\n          press={handleKeyPress}\r\n          createPeople={createNewPeopleItem}\r\n        />\r\n      </PeopleContainer>\r\n    </PeopleMain>\r\n  );\r\n};\r\n\r\nPeopleList.propTypes = {\r\n  logo: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\r\n};\r\n\r\nPeopleList.defaultProps = {\r\n  logo: './logo.svg',\r\n};\r\n\r\nexport default PeopleList;\r\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.css';\nimport PeopleList from './components/PeopleList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"container\">\n        <Route exact path=\"/\" component={PeopleList} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { IntlProvider, addLocaleData } from \"react-intl\";\nimport en from \"react-intl/locale-data/en\";\nimport es from \"react-intl/locale-data/es\";\n\nimport localeData from \"./public/locales/data.json\";\n\naddLocaleData([...en, ...es]);\n\n// Define user's language. Different browsers have the user locale defined\n// on different fields on the `navigator` object, so we make sure to account\n// for these different by checking all of them\nconst language =\n  (navigator.languages && navigator.languages[0]) ||\n  navigator.language ||\n  navigator.userLanguage;\n\n// Split locales with a region code\nconst languageWithoutRegionCode = language.toLowerCase().split(/[_-]+/)[0];\n\n// Try full locale, try locale without region code, fallback to 'en'\nconst messages =\n  localeData[languageWithoutRegionCode] ||\n  localeData[language] ||\n  localeData.en;\n\nReactDOM.render(\n  <IntlProvider locale={language} messages={messages}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </IntlProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}